引入axios及跨域使用
1.使用cnpm安装axios    cnpm install axios --save-dev
2.在main.js中引入axios  import axios from 'axios'
  修改Vue.prototype     Vue.prototype.$axios=axios
3.完成上述步骤就能直接在组件的methods中使用this.$axios命令了 


使用vue-cli这种脚手架工具开发时，由于项目本身启动本地服务是需要占用一个端口的，所以前后端调试的时候必然会产生跨域的问题。
在使用webpack做构建工具的项目中使用proxyTable代理实现跨域是一种比较方便的选择。
在项目目录中找到根目录下config文件夹下的index.js文件，找到dev对象，修改dev对象中的proxyTable属性，如
proxyTable: {
    '/api': {
      target: 'http://www.abc.com',  //目标接口域名
      changeOrigin: true,  //是否跨域
      pathRewrite: {
        '^/api': '/api'   //重写接口
      }
 },
 保存后就会将本地端口的一个请求代理到了http://www.abc.com这一域名下：即
'http://localhost:8080/api' ===> 'http://www.abc.com/api'
这样就可以接收到前端传过来的数据啦，非常方便！

上面那种情况是有一个统一的项目名api的，所以说是比较好匹配的，就相当于说直接将以api开头的接口名代理一下换成目标域名访问就好了，可是如果说后台返给我们前端的接口没有了统一的项目名呢？之前，我是一个个单独去做了转换，接口少还没什么关系，但多了肯定是不现实的，可做如下改进：
//先人为给接口地址前面加上一个自定义的项目名,只要在每个url前面加上'/api'就可以，index.js改好后不需要动。
let someApi = '/api' + '/xx/xx';

dev: {
env: require('./dev.env'),
port: 8080,
autoOpenBrowser: true,
assetsSubDirectory: 'static',
assetsPublicPath: '/',
proxyTable: {
'/api': {
target: 'http://localhost:8088', //目标接口域名
changeOrigin: true, //是否跨域
pathRewrite: {
'^/api': '' //重写接口
}
},
cssSourceMap: false
}`
``
这里的项目名api是我们人为加上去的，经过代理之后就没了，这样我们在配置代理这里还是只需要配置一份就够了，只是在写接口地址时要注意区分开发环境和线上环境就可以了。
参考资料：https://www.cnblogs.com/wancheng7/p/8987694.html
