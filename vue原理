参考资料：1.https://blog.csdn.net/wmwmdtt/article/details/55095420
         2.https://segmentfault.com/a/1190000006599500
                  
Vue实现双向绑定的原理：
采用了数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()（ES5提出，故Vue不支持IE8及以下）来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。

依赖跟踪（数据劫持）流程例子:
例如，在渲染函数里面用到A.B的时候，这个就会触发对应的 getter。整个渲染流程具体要点如下：
当某个数据属性被用到时，触发 getter，这个属性就会被作为依赖被 watcher 记录下来。
整个函数被渲染完的时候，每一个被用到的数据属性都会被记录。
相应的数据变动时，例如给它一个新的值，就会触发 setter，通知数据对象对应数据有变化。
此时会通知对应的组件，其数据依赖有所改动，需要重新渲染。
对应的组件再次调动渲染函数，生成 Virtual DOM，实现 DOM 更新。


手动实现MVVM步骤
 1、实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者 2、实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数 3、实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图 4、mvvm入口函数，整合以上三者 。
通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。 


虚拟DOM和声明式渲染
Vue的编译器在编译模板之后，会把这些模板编译成一个渲染函数 。而函数被调用的时候就会渲染并且返回一个 虚拟DOM的树 。这个树非常轻量，它的职责就是描述当前界面所应处的状态。当我们 有了这个虚拟的树之后，再交给一个patch函数，负责把这些虚拟DOM真正施加到真实的DOM上 。在这个过程中，Vue有自身的响应式系统来侦测在渲染过程中所依赖到的数据来源。在渲染过程中，侦测到的数据来源之后，之后就可以精确感知数据源的变动。到时候就可以根据需要重新进行渲染。当重新进行渲染之后，会生成一个新的树，将新树与旧树进行对比，就可以最终得出应施加到真实DOM上的改动。最后再通过patch函数施加改动。

 
vue生命周期：
https://www.cnblogs.com/happ0/p/8075562.html
开始创建=>初始化数据=>编译模板=>挂载dom=>渲染=>更新=>渲染=>销毁
